// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace LoginCodedUITestProject.LoginWindowIUMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class LoginWindowIUMap
    {
        
        /// <summary>
        /// AssertValidErrMsg - Use 'AssertValidErrMsgExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertValidErrMsg()
        {
            #region Variable Declarations
            WpfText errorMsg = this.UILoginWindow.ErrorMsgContainer.ErrorMsg;
            #endregion

            // Verify that the 'DisplayText' property of 'The username and password combination was invalid' label equals 'The username and password combination was invalid'
            Assert.AreEqual(this.AssertValidErrMsgExpectedValues.ErrorMsgDisplayText, errorMsg.DisplayText, "Unexpected Error Message");
        }
        
        /// <summary>
        /// ClickLogin
        /// </summary>
        public void ClickLogin()
        {
            #region Variable Declarations
            WpfButton uILoginButton = this.UILoginWindow.UILoginButton;
            #endregion

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(44, 19));
        }
        
        /// <summary>
        /// TypeUsername - Use 'TypeUsernameParams' to pass parameters into this method.
        /// </summary>
        public void TypeUsername()
        {
            #region Variable Declarations
            WpfEdit uIUserNameTextboxEdit = this.UILoginWindow.UIUserNameTextboxEdit;
            #endregion

            // Type 'alexandre' in 'UserNameTextbox' text box
            uIUserNameTextboxEdit.Text = this.TypeUsernameParams.UIUserNameTextboxEditText;
        }
        
        /// <summary>
        /// TypeUserPassword - Use 'TypeUserPasswordParams' to pass parameters into this method.
        /// </summary>
        public void TypeUserPassword()
        {
            #region Variable Declarations
            WpfEdit uIPasswordTextboxEdit = this.UILoginWindow.UIPasswordTextboxEdit;
            #endregion

            // Type 'P@ssword' in 'PasswordTextbox' text box
            uIPasswordTextboxEdit.Text = this.TypeUserPasswordParams.UIPasswordTextboxEditText;
        }
        
        #region Properties
        public virtual AssertValidErrMsgExpectedValues AssertValidErrMsgExpectedValues
        {
            get
            {
                if ((this.mAssertValidErrMsgExpectedValues == null))
                {
                    this.mAssertValidErrMsgExpectedValues = new AssertValidErrMsgExpectedValues();
                }
                return this.mAssertValidErrMsgExpectedValues;
            }
        }
        
        public virtual TypeUsernameParams TypeUsernameParams
        {
            get
            {
                if ((this.mTypeUsernameParams == null))
                {
                    this.mTypeUsernameParams = new TypeUsernameParams();
                }
                return this.mTypeUsernameParams;
            }
        }
        
        public virtual TypeUserPasswordParams TypeUserPasswordParams
        {
            get
            {
                if ((this.mTypeUserPasswordParams == null))
                {
                    this.mTypeUserPasswordParams = new TypeUserPasswordParams();
                }
                return this.mTypeUserPasswordParams;
            }
        }
        
        public UILoginTestApplicationWindow UILoginTestApplicationWindow
        {
            get
            {
                if ((this.mUILoginTestApplicationWindow == null))
                {
                    this.mUILoginTestApplicationWindow = new UILoginTestApplicationWindow();
                }
                return this.mUILoginTestApplicationWindow;
            }
        }
        
        public UILoginWindow UILoginWindow
        {
            get
            {
                if ((this.mUILoginWindow == null))
                {
                    this.mUILoginWindow = new UILoginWindow();
                }
                return this.mUILoginWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertValidErrMsgExpectedValues mAssertValidErrMsgExpectedValues;
        
        private TypeUsernameParams mTypeUsernameParams;
        
        private TypeUserPasswordParams mTypeUserPasswordParams;
        
        private UILoginTestApplicationWindow mUILoginTestApplicationWindow;
        
        private UILoginWindow mUILoginWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValidErrMsg'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertValidErrMsgExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'The username and password combination was invalid' label equals 'The username and password combination was invalid'
        /// </summary>
        public string ErrorMsgDisplayText = "The username and password combination was invalid";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypeUsername'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class TypeUsernameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'alexandre' in 'UserNameTextbox' text box
        /// </summary>
        public string UIUserNameTextboxEditText = "alexandre";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypeUserPassword'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class TypeUserPasswordParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'P@ssword' in 'PasswordTextbox' text box
        /// </summary>
        public string UIPasswordTextboxEditText = "P@ssword";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UILoginTestApplicationWindow : WpfWindow
    {
        
        public UILoginTestApplicationWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Login Test Application";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Login Test Application");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UILoginWindow : WpfWindow
    {
        
        public UILoginWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Login";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Login");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUserNameTextboxEdit
        {
            get
            {
                if ((this.mUIUserNameTextboxEdit == null))
                {
                    this.mUIUserNameTextboxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUserNameTextboxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UserNameTextbox";
                    this.mUIUserNameTextboxEdit.WindowTitles.Add("Login");
                    #endregion
                }
                return this.mUIUserNameTextboxEdit;
            }
        }
        
        public WpfEdit UIPasswordTextboxEdit
        {
            get
            {
                if ((this.mUIPasswordTextboxEdit == null))
                {
                    this.mUIPasswordTextboxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordTextboxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordTextbox";
                    this.mUIPasswordTextboxEdit.WindowTitles.Add("Login");
                    #endregion
                }
                return this.mUIPasswordTextboxEdit;
            }
        }
        
        public WpfButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "LoginButton";
                    this.mUILoginButton.WindowTitles.Add("Login");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        
        public ErrorMsgContainer ErrorMsgContainer
        {
            get
            {
                if ((this.mErrorMsgContainer == null))
                {
                    this.mErrorMsgContainer = new ErrorMsgContainer(this);
                }
                return this.mErrorMsgContainer;
            }
        }
        
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.WindowTitles.Add("Login");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUserNameTextboxEdit;
        
        private WpfEdit mUIPasswordTextboxEdit;
        
        private WpfButton mUILoginButton;
        
        private ErrorMsgContainer mErrorMsgContainer;
        
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class ErrorMsgContainer : WpfText
    {
        
        public ErrorMsgContainer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorMessageLabel";
            this.WindowTitles.Add("Login");
            #endregion
        }
        
        #region Properties
        public WpfText ErrorMsg
        {
            get
            {
                if ((this.mErrorMsg == null))
                {
                    this.mErrorMsg = new WpfText(this);
                    #region Search Criteria
                    this.mErrorMsg.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorMessageLabelText";
                    this.mErrorMsg.WindowTitles.Add("Login");
                    #endregion
                }
                return this.mErrorMsg;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mErrorMsg;
        #endregion
    }
}
